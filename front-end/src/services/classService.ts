import axios from "axios";
import { API_CONFIG, API_TIMEOUT, createAPIInstance } from "../config/api";
import { ApiResponse, Student } from "../types/api";
import AsyncStorage from "@react-native-async-storage/async-storage";

// Create API instance with auth headers
const api = createAPIInstance();

export interface ClassAPIResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
}

// Class API functions
export const classAPI = {
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏õ‡∏µ ‡∏û.‡∏®.)
  getStudentsByYear: async (
    buddhistYear: string
  ): Promise<ClassAPIResponse<Student[]>> => {
    try {
      console.log(`üìö Getting students for year: ${buddhistYear}`);

      // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      const token = await AsyncStorage.getItem("userToken");
      console.log(`üìö Token available: ${token ? "Yes" : "No"}`);
      if (token) {
        console.log(`üìö Token length: ${token.length}`);
      }

      const response = await api.get(
        API_CONFIG.ENDPOINTS.CLASS.GET_STUDENTS(buddhistYear)
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response structure
      if (response.data) {
        let students: Student[] = [];

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô response.data.data (nested structure)
        if (response.data.data && Array.isArray(response.data.data)) {
          students = response.data.data;
        }
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô response.data ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        else if (Array.isArray(response.data)) {
          students = response.data;
        }
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ students property
        else if (
          response.data.students &&
          Array.isArray(response.data.students)
        ) {
          students = response.data.students;
        }


        return {
          success: true,
          data: students,
          message: `‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${students.length} ‡∏Ñ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ ${buddhistYear}`,
        };
      }

      return {
        success: false,
        data: [],
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
      };
    } catch (error: any) {
      console.error("üìö Class service error:", error);

      if (error.response) {
        const status = error.response.status;
        const message = error.response.data?.message || error.message;

        console.log(`üìö Error status: ${status}, message: ${message}`);

        if (status === 401) {
          // ‡∏•‡∏≠‡∏á‡∏•‡∏ö token ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ signin ‡πÉ‡∏´‡∏°‡πà
          await AsyncStorage.removeItem("userToken");
          await AsyncStorage.removeItem("userData");

          return {
            success: false,
            data: [],
            message: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          };
        } else if (status === 404) {
          return {
            success: false,
            data: [],
            message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ ${buddhistYear}`,
          };
        } else {
          return {
            success: false,
            data: [],
            message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${message}`,
          };
        }
      }

      return {
        success: false,
        data: [],
        message:
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï",
      };
    }
  },

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getCurrentYearStudents: async (): Promise<ClassAPIResponse<Student[]>> => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentBuddhistYear = (new Date().getFullYear() + 543).toString();
    return classAPI.getStudentsByYear(currentBuddhistYear);
  },
};
